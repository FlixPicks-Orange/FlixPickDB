openapi: '3.0.2'
info:
  title: FlixPicks Database API
  version: '1.0.0'

servers:
  - url: '/api'

components:
  schemas:
    User:
      type: object
      required:
        - username
        - email
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        fname:
          type: string
        lname:
          type: string
        role:
          type: string
    WatchHistory:
      type: object
      required:
        - user_id
        - movie_id
        - title
      properties:
        user_id:
          type: integer
        movie_id:
          type: integer
        title:
          type: string
        
  parameters:
    username:
      name: "username"
      description: "username"
      in: path
      required: True
      schema:
        type: "string"
    email:
      name: "email"
      description: "email"
      in: path
      required: True
      schema:
        type: "string"
    user_id:
      name: "id"
      description: "user id"
      in: path
      required: True
      schema:
        type: "string"

tags:
  - name: Users
    description: User profile information for FlixPicks
  - name: Watch History
    description: History of movies watched by FlixPicks Users
  - name: Interactions
    description: User interactions with media through FlixPicks

paths:
  /users:
    get:
      summary: Display all users
      tags:
        - Users
      operationId: userdata.users.show_all
      responses:
        '200':
          description: OK
    post:
      summary: Add new user
      tags:
        - Users
      operationId: "userdata.users.add"
      requestBody:
        description: "User to add"
        required: true
        content:
          application/json:
            schema:
                x-body-name: "user"
                $ref: "#/components/schemas/User"
      responses:
        "201":
          description: "New user added successfully"
        "422":
          description: "Username or E-mail provided already exists"    

  /users/{id}:
    get:
      summary: Find existing user by user id
      tags:
        - Users
      operationId: userdata.users.lookup_by_id
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        '200':
          description: OK
        '404':
          description: User not found
 
  /users/username/{username}:
    get:
      summary: Find existing user by username
      tags:
        - Users
      operationId: userdata.users.lookup_by_username
      parameters:
        - $ref: "#/components/parameters/username"
      responses:
        '200':
          description: OK
        '404':
          description: User not found

  /users/email/{email}:
    get:
      summary: Find existing user by E-mail address
      tags:
        - Users
      operationId: userdata.users.lookup_by_email
      parameters:
        - $ref: "#/components/parameters/email"
      responses:
        '200':
          description: OK
        '404':
          description: User not found

  /users/update/{username}/full:
    put:
      summary: Update User's Profile (All Items)
      tags:
        - Users
      operationId: userdata.users.update_full
      parameters:
        - $ref: "#/components/parameters/username"
      requestBody:
        description: "Updated user information"
        required: true
        content:
          application/json:
            schema:
                x-body-name: "user"
                $ref: "#/components/schemas/User"
      responses:
        "200":
          description: "User updated successfully"
        '404':
          description: User not found
  
  /users/update/{username}/password:
    patch:
      summary: Update User's Password
      tags:
        - Users
      operationId: userdata.users.update_password
      parameters:
        - $ref: "#/components/parameters/username"
      requestBody:
        description: "New user password to store"
        required: true
        content:
          application/json:
            schema:
                x-body-name: "data"
                type: object
                properties:
                  password:
                    type: string
      responses:
        "200":
          description: "User updated successfully"
        '404':
          description: User not found
  
  /users/update/{username}/role:
    patch:
      summary: Update User's Role
      tags:
        - Users
      operationId: userdata.users.update_role
      parameters:
        - $ref: "#/components/parameters/username"
      requestBody:
        description: "New user role to store"
        required: true
        content:
          application/json:
            schema:
                x-body-name: "data"
                type: object
                properties:
                  role:
                    type: string
      responses:
        "200":
          description: "User updated successfully"
        '404':
          description: User not found
  
  /users/update/{username}/last_login:
    patch:
      summary: Update User's Last Login
      tags:
        - Users
      operationId: userdata.users.update_last_login
      parameters:
        - $ref: "#/components/parameters/username"
      responses:
        "200":
          description: "User updated successfully"
        '404':
          description: User not found
  
  /users/update/{username}/limit_subscriptions:
    patch:
      summary: Update User's Setting for Limit to Subscriptions
      tags:
        - Users
      operationId: userdata.users.update_limit_subscriptions
      parameters:
        - $ref: "#/components/parameters/username"
      requestBody:
        description: "New user value to store"
        required: true
        content:
          application/json:
            schema:
                x-body-name: "data"
                type: object
                properties:
                  limit_subscriptions:
                    type: boolean
      responses:
        "200":
          description: "User updated successfully"
        '404':
          description: User not found


  /watch_history:
    get:
      summary: Display all watch history
      tags:
        - Watch History
      operationId: userdata.watch_history.show_all
      responses:
        '200':
          description: OK
    post:
      summary: Add to an itme to the user's watch history
      tags:
        - Watch History
      operationId: "userdata.watch_history.add"
      requestBody:
        description: "Entry to add to user's watch history"
        required: true
        content:
          application/json:
            schema:
                x-body-name: "entry"
                $ref: "#/components/schemas/WatchHistory"
      responses:
        "201":
          description: "New entry added successfully"
  /watch_history/{id}:
    get:
      summary: Find user's watch history by user id
      tags:
        - Watch History
      operationId: userdata.watch_history.lookup_by_id
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        '200':
          description: OK