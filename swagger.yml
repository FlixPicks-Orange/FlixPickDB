openapi: '3.0.2'
info:
  title: FlixPicks Database API
  version: '1.0.0'

servers:
  - url: '/api'

components:
  schemas:
    User:
      type: object
      required:
        - username
        - email
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        fname:
          type: string
        lname:
          type: string
        role:
          type: string
    Subscription:
      type: object
      required:
        - user_id
        - provider_id
      properties:
        user_id:
          type: integer
        provider_id:
          type: integer
    WatchHistory:
      type: object
      required:
        - user_id
        - movie_id
        - title
      properties:
        user_id:
          type: integer
        movie_id:
          type: integer
        title:
          type: string
    Recommendations:
      type: object
      required:
        - user_id
        - movie_id
        - title
      properties:
        user_id:
          type: integer
        movie_id:
          type: integer
        title:
          type: string


  parameters:
    username:
      name: "username"
      description: "username"
      in: path
      required: True
      schema:
        type: "string"
    email:
      name: "email"
      description: "email"
      in: path
      required: True
      schema:
        type: "string"
    user_id:
      name: "user_id"
      description: "user id"
      in: path
      required: True
      schema:
        type: "string"
    provider_id:
      name: "provider_id"
      description: "provider id"
      in: path
      required: True
      schema:
        type: "string"
    genre_id:
      name: "genre_id"
      description: "genre id"
      in: path
      required: True
      schema:
        type: "string"
    movie_id:
      name: "movie_id"
      description: "movie id"
      in: path
      required: True
      schema:
        type: "string"



tags:
  - name: Movies
    description: Basic movie information found on FlixPicks
  - name: Providers
    description: List of available streaming providers on FlixPicks
  - name: Genres
    description: List of available genres used by FlixPicks
  - name: Users
    description: User profile information for FlixPicks
  - name: Subscriptions
    description: User subscriptions list
  - name: Watch History
    description: History of movies watched by FlixPicks Users
  - name: Recommendations
    description: List of recommendations generated for each registered user
  - name: Interactions
    description: User interactions with media through FlixPicks



paths:
  /users:
    get:
      summary: Display all users
      tags:
        - Users
      operationId: userdata.users.show_all
      responses:
        '200':
          description: OK
    post:
      summary: Add new user
      tags:
        - Users
      operationId: "userdata.users.add"
      requestBody:
        description: "User to add"
        required: true
        content:
          application/json:
            schema:
                x-body-name: "user"
                $ref: "#/components/schemas/User"
      responses:
        "201":
          description: "New user added successfully"
        "409":
          description: "Username or E-mail provided already exists"
  /users/{user_id}:
    get:
      summary: Find existing user by user id
      tags:
        - Users
      operationId: userdata.users.lookup_by_id
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        '200':
          description: OK
        '404':
          description: User not found
 
  /users/username/{username}:
    get:
      summary: Find existing user by username
      tags:
        - Users
      operationId: userdata.users.lookup_by_username
      parameters:
        - $ref: "#/components/parameters/username"
      responses:
        '200':
          description: OK
        '404':
          description: User not found

  /users/email/{email}:
    get:
      summary: Find existing user by E-mail address
      tags:
        - Users
      operationId: userdata.users.lookup_by_email
      parameters:
        - $ref: "#/components/parameters/email"
      responses:
        '200':
          description: OK
        '404':
          description: User not found

  /users/update/{username}/full:
    put:
      summary: Update User's Profile (All Items)
      tags:
        - Users
      operationId: userdata.users.update_full
      parameters:
        - $ref: "#/components/parameters/username"
      requestBody:
        description: "Updated user information"
        required: true
        content:
          application/json:
            schema:
                x-body-name: "user"
                type: object
                required:
                  - password
                  - fname
                  - lname
                  - role
                properties:
                  password:
                    type: string
                  fname:
                    type: string
                  lname:
                    type: string
                  role:
                    type: string
      responses:
        "200":
          description: "User updated successfully"
        '404':
          description: User not found
  
  /users/update/{username}/password:
    patch:
      summary: Update User's Password
      tags:
        - Users
      operationId: userdata.users.update_password
      parameters:
        - $ref: "#/components/parameters/username"
      requestBody:
        description: "New user password to store"
        required: true
        content:
          application/json:
            schema:
                x-body-name: "data"
                type: object
                required:
                  - password
                properties:
                  password:
                    type: string
      responses:
        "200":
          description: "User updated successfully"
        '404':
          description: User not found
  
  /users/update/{username}/role:
    patch:
      summary: Update User's Role
      tags:
        - Users
      operationId: userdata.users.update_role
      parameters:
        - $ref: "#/components/parameters/username"
      requestBody:
        description: "New user role to store"
        required: true
        content:
          application/json:
            schema:
                x-body-name: "data"
                type: object
                required:
                  - role
                properties:
                  role:
                    type: string
      responses:
        "200":
          description: "User updated successfully"
        '404':
          description: User not found
  
  /users/update/{username}/last_login:
    patch:
      summary: Update User's Last Login
      tags:
        - Users
      operationId: userdata.users.update_last_login
      parameters:
        - $ref: "#/components/parameters/username"
      responses:
        "200":
          description: "User updated successfully"
        '404':
          description: User not found
  
  /users/update/{username}/limit_subscriptions:
    patch:
      summary: Update User's Setting for Limit to Subscriptions
      tags:
        - Users
      operationId: userdata.users.update_limit_subscriptions
      parameters:
        - $ref: "#/components/parameters/username"
      requestBody:
        description: "New user value to store"
        required: true
        content:
          application/json:
            schema:
                x-body-name: "data"
                type: object
                properties:
                  limit_subscriptions:
                    type: boolean
      responses:
        "200":
          description: "User updated successfully"
        '404':
          description: User not found
  
  /users/update/{username}/survey_check:
    patch:
      summary: Update User's Survey Check
      tags:
        - Users
      operationId: userdata.users.update_survey_check
      parameters:
        - $ref: "#/components/parameters/username"
      responses:
        "200":
          description: "User updated successfully"
        '404':
          description: User not found


  /subscriptions:
    get:
      summary: Display all subscriptions
      tags:
        - Subscriptions
      operationId: userdata.subscriptions.show_all
      responses:
        '200':
          description: OK
  
  /subscriptions/{user_id}:
    get:
      summary: Get all genre info by id
      tags:
        - Subscriptions
      operationId: userdata.subscriptions.lookup_by_id
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        '200':
          description: OK
  
  /subscriptions/{user_id}/update/{provider_id}:
    post:
      summary: Add subscription to user's list
      tags:
        - Subscriptions
      operationId: "userdata.subscriptions.add"
      parameters:
        - $ref: "#/components/parameters/user_id"
        - $ref: "#/components/parameters/provider_id"
      responses:
        "201":
          description: "Subscription added successfully"
        "409":
          description: "Subscription provided already exists"
    delete:
      summary: Remove subscription from user's list
      tags:
        - Subscriptions
      operationId: "userdata.subscriptions.delete"
      parameters:
        - $ref: "#/components/parameters/user_id"
        - $ref: "#/components/parameters/provider_id"
      responses:
        "200":
          description: "Subscription removed successfully"
        "404":
          description: "Subscription not found"



  /watch_history:
    get:
      summary: Display all watch history
      tags:
        - Watch History
      operationId: userdata.watch_history.show_all
      responses:
        '200':
          description: OK
    post:
      summary: Add to an itme to the user's watch history
      tags:
        - Watch History
      operationId: "userdata.watch_history.add"
      requestBody:
        description: "Entry to add to user's watch history"
        required: true
        content:
          application/json:
            schema:
                x-body-name: "entry"
                $ref: "#/components/schemas/WatchHistory"
      responses:
        "201":
          description: "New entry added successfully"
  /watch_history/{id}:
    get:
      summary: Find user's watch history by user id
      tags:
        - Watch History
      operationId: userdata.watch_history.lookup_by_id
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        '200':
          description: OK


  /recommendations:
    get:
      summary: Display all recommendations
      tags:
        - Recommendations
      operationId: userdata.recommendations.show_all
      responses:
        '200':
          description: OK
    post:
      summary: Add to an item to the user's recommendation
      tags:
        - Recommendations
      operationId: "userdata.recommendations.add"
      requestBody:
        description: "Entry to add to user's watch history"
        required: true
        content:
          application/json:
            schema:
                x-body-name: "entry"
                $ref: "#/components/schemas/Recommendations"
      responses:
        "201":
          description: "New entry added successfully"
  

  /movies:
    get:
      summary: Display all movies
      tags:
        - Movies
      operationId: content.movies.show_all
      responses:
        '200':
          description: OK
  
  /movies/{movie_id}:
    get:
      summary: Display movie data for provided movie id
      tags:
        - Movies
      operationId: content.movies.get_by_movie_id
      parameters:
        - $ref: "#/components/parameters/movie_id"
      responses:
        '200':
          description: OK

  /movies/{movie_id}/genres:
    get:
      summary: Display list of genres for provided movie id
      tags:
        - Movies
      operationId: content.movie_genres.get_by_movie_id
      parameters:
        - $ref: "#/components/parameters/movie_id"
      responses:
        '200':
          description: OK
  
  /movies/{movie_id}/providers:
    get:
      summary: Display list of providers for provided movie id
      tags:
        - Movies
      operationId: content.movie_providers.get_by_movie_id
      parameters:
        - $ref: "#/components/parameters/movie_id"
      responses:
        '200':
          description: OK
  
  /movies/all_providers:
    get:
      summary: Display all movie and provider relationships
      tags:
        - Movies
      operationId: content.movie_providers.show_all
      responses:
        '200':
          description: OK
  
  /movies/all_genres:
    get:
      summary: Display all movie and genre relationships
      tags:
        - Movies
      operationId: content.movie_genres.show_all
      responses:
        '200':
          description: OK
  

  /providers:
    get:
      summary: Display all streaming providers available on FlixPicks
      tags:
        - Providers
      operationId: content.providers.show_all
      responses:
        '200':
          description: OK
    
  /providers/{provider_id}:
    get:
      summary: Get all provider info by id
      tags:
        - Providers
      operationId: content.providers.lookup_by_id
      parameters:
        - $ref: "#/components/parameters/provider_id"
      responses:
        '200':
          description: OK
  
  /providers/{provider_id}/name:
    get:
      summary: Get provider name by id
      tags:
        - Providers
      operationId: content.providers.get_provider_name
      parameters:
        - $ref: "#/components/parameters/provider_id"
      responses:
        '200':
          description: OK
  

  /genres:
    get:
      summary: Display all genres used by FlixPicks
      tags:
        - Genres
      operationId: content.genres.show_all
      responses:
        '200':
          description: OK
  
  /genres/{genre_id}:
    get:
      summary: Get all genre info by id
      tags:
        - Genres
      operationId: content.genres.lookup_by_id
      parameters:
        - $ref: "#/components/parameters/genre_id"
      responses:
        '200':
          description: OK
  
  /genres/{genre_id}/name:
    get:
      summary: Get genre name by id
      tags:
        - Genres
      operationId: content.genres.get_provider_name
      parameters:
        - $ref: "#/components/parameters/genre_id"
      responses:
        '200':
          description: OK